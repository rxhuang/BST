[cs100wcu@ieng6-202]:~:27$ 
Question 1.
4 files created: testBST.o BSTInt.o BSTNodeInt.o and bst

Question 2.
BSTInt.cpp: In function 'bool insert(int)':
BSTInt.cpp:25:8: error: 'root' was not declared in this scope
   if (!root) {
        ^
BSTInt.cpp:27:7: error: 'isize' was not declared in this scope
     ++isize;
       ^
BSTInt.cpp:31:22: error: 'root' was not declared in this scope
   BSTNodeInt* curr = root;
                      ^
BSTInt.cpp:56:5: error: 'isize' was not declared in this scope
   ++isize;
     ^
The error is saying that we have not declared the variables root and isize.
This occurs because if we do not use the name scope BSTInt, then we cannot use the variables we declared in BSTInt.h


Question3.
The bug was in the insertion function. The function may insert a left or right child to a node even if the node already has a left or right child and it allows duplicates to be inserted if the duplicate node is a leaf node.

Question4.
I noticed there was somthing wrong when i was looking at the line "while(curr->left && curr->right)". This loop is intended to find the first node satisfying the BST property that has at most one child and the next part was to create a new node and add to this parent node. However, we are supposed to find the last node satisfying the BST property that has at most one child. So I changed the line to "while(curr->left || curr->right)" and got segmentatioin fault when I ran my tests. I then realized it was because it lets cur point to a child that may not exist. So, I added conditions to check if a child exists before I let cur point to it. Then I ran more test and when I got to my test called leafDuplicate, it failed by allowing me to add duplicates of a leaf node. I wen to the code and realized that the second part only had a condition for nodes smaller the parent but no condition for nodes greater than the parent, so I added a condition and everything worked fine.

Question5.
The insert method of BST.hpp passes its argument by reference because it is a template class and the data we store may be very big that passing by value will waste a lot of memory by making copies of the data.
The insert method of BSTInt.h class passes its argument by value because we know that are data is type int and it does not take up a lot of memory. In this case, pass by value is better because it prevents us from changing the data passed in.

Question6.
The sorted file produces taller trees. (random file height 32 vs sorted file height 11793 with both their sizes being 11794)

Question7.
Research shows that expected height for BST with size N using random insertions is Log(N). Source Below. 
http://cs.stackexchange.com/questions/6342/proof-that-a-randomly-built-binary-search-tree-has-logarithmic-height
Expected height for BST with size N using sorted insertions is obviously N-1, because every element is inserted as a right child (left child if sorted in decreasing order) of the previous insertion, so the tree ends up with Height N-1 since root node is height 0.

I created my own trees with sizes 1000, 2000, 30000, 50000, 10000, 20000, 50000 to test my expected heights.
From Question6 we know that an unsorted tree with size 11794 has height 32. Solving ln(11794)/ln(x)=32 we have x=1.34. Therefore, in my following calculations involving log, I will use 1.34 as the base of log.

For the tree with size 1000:
Expected height for unsorted insertions is log(1000) = 23.60, actual height was 23.
Expected height for sorted insertions is 1000-1 = 999, actual height was 999.

For the tree with size 2000:
Expected height for unsorted insertions is log(2000) = 25.97, actual height was 24.
Expected height for sorted insertions is 2000-1 = 1999, actual height was 1999.

For the tree with size 3000:
Expected height for unsorted insertions is log(3000) = 27.35, actual height was 26.
Expected height for sorted insertions is 3000-1 = 2999, actual height was 2999.

For the tree with size 5000:
Expected height for unsorted insertions is log(5000) = 29.10, actual height was 30.
Expected height for sorted insertions is 5000-1 = 4999, actual height was 4999.

For the tree with size 10000:
Expected height for unsorted insertions is log(10000) = 31.47, actual height was 30.
Expected height for sorted insertions is 10000-1 =9999, actual height was 9999.

For the tree with size 20000:
Expected height for unsorted insertions is log(20000) = 33.84, actual height was 33.
Expected height for sorted insertions is 20000-1 = 19999, actual height was 19999.

For the tree with size 50000:
Expected height for unsorted insertions is log(50000) = 36.97, actual height was 37.
Expected height for sorted insertions is 50000-1 = 49999, actual height was 49999.

As shown above, our test results indeed match our expectations.  
